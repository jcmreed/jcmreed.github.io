{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#welcome-to-the-landing-page-for-direct-access-to-all-of-jc-reeds-indiviual-assignments-for-egr314","title":"Welcome to the landing page for direct access to all of JC Reed's indiviual assignments for EGR314.","text":"<p>Access my team's webpage: Team 201's Webpage</p>","tags":["tag1","tag2"]},{"location":"#my-assignments","title":"My Assignments","text":"Assignment Link Block Diagram link Component Selection link Schematic &amp; PCB Design link Bill of Materials link Application Programming Interface (API) link Resources link","tags":["tag1","tag2"]},{"location":"Application%20Programming%20Interface%20%28API%29/","title":"Application Programming Interface (API)","text":""},{"location":"Application%20Programming%20Interface%20%28API%29/#my-role-in-the-daisy-chain","title":"My role in the Daisy Chain","text":"<p>Each team member has their own responsibility on what to send to the chain and how to handle necessary messages from the chain. Again, the subsystem I am responsible for is the Human Machine Interface (HMI). The HMI is where the exhibit user will select a path that they believe matches the color of the element. Listed below is the messaging protocol that the team is using throughout this process. For a more detailed explanation, please refer to this link.</p>"},{"location":"Application%20Programming%20Interface%20%28API%29/#address-ids","title":"Address IDs","text":"Team Member Subsystem ID JC R (myself) Human Machine Interface (HMI) H Eric M RGB Sensor S Marcus P MQTT Server M Bradley P Actuator A"},{"location":"Application%20Programming%20Interface%20%28API%29/#team-message-protocol","title":"Team Message Protocol","text":"Message Type  byte 1-2 (uint16_t) Description Data Command 0 Status Code 0 (Offline)  1 (Online)  2 (Waiting)  3 (Error) 1 Drive Mode 0 (Automatic)  1 (Manual/Direct Drive) 2 Sensor Data 0 (Orange)  1 (Blue)  2 (Pink) 3 Path Selection 0 (Left)  1 (Center)  3 (Right) <p>The Human Machine Interface uses 3 of these message types. The first one is the status code, which essentially tells the next system in the chain that my system is online/offline. </p>"},{"location":"Application%20Programming%20Interface%20%28API%29/#message-type-0-status-code","title":"Message Type 0: Status Code","text":"Byte 1-2 Byte 3 Var Name msg_type status Var Type uint16_t uint8_t Min Val 0 0 Max Val 3 3 Example 0 2 <p>The second message type that my subsystem uses is Message Type 1: Select Mode. This is because when the exhibit user interacts with the HMI, a message must be sent to the chain that the entire system should enter Direct Drive (Manual) Mode. </p>"},{"location":"Application%20Programming%20Interface%20%28API%29/#message-type-1-select-mode","title":"Message Type 1: Select Mode","text":"Byte 1-2 Byte 3 Var Name msg_type mode Var Type uint16_t uint8_t Min Val 0 0 Max Val 3 1 Example 1 1 <p>The final message type that my subsystem uses is Message Type 3: Select Path. The user must make a path choice on the HMI, and depending on their selection, that's what tells the Actuator where to move to.</p>"},{"location":"Application%20Programming%20Interface%20%28API%29/#message-type-3-select-path","title":"Message Type 3: Select Path","text":"Byte 1-2 Byte 3 Var Name msg_type path Var Type uint16_t uint8_t Min Val 0 0 Max Val 3 2 Example 3 2"},{"location":"Application%20Programming%20Interface%20%28API%29/#handling-messages-code","title":"Handling Messages (Code)","text":"<pre><code>#Import Modules\nfrom machine import UART\nfrom machine import Pin\nimport time\nimport uasyncio as asyncio\n\nMAX_MESSAGE_LEN=64\nteam = [b'H',b'M',b'A',b'S']\nid = b'H'\nbroadcast = b'X'\n\nVALID_MESSAGE_TYPES = {\n    0x00: [0x00, 0x01, 0x02, 0x03],  # Status Code (0-3)\n    0x01: [0x00, 0x01],              # Drive Mode (0-1)\n    0x02: [0x00, 0x01, 0x02],        # Sensor Data (0-2)\n    0x03: [0x00, 0x01, 0x02]         # Path Selection (0-2)\n}\n\n# initialize a new UART class\nuart = UART(2, 9600,tx=37,rx=36)\n\n# run the init method with more details including baudrate and parity\nuart.init(9600, bits=8, parity=None, stop=1) \n\n# define pin 7 as an output with name led.\nled = Pin(7,Pin.OUT)\n\ndef send_message(sender, receiver, msg_type, data):\n    if sender not in team: \n        print(\"Error: Invalid sender ID.\")\n        return\n    if receiver not in team and receiver != broadcast:\n        print(\"Error: Invalid receiver ID.\")\n        return\n    if msg_type not in VALID_MESSAGE_TYPES or data not in VALID_MESSAGE_TYPES[msg_type]:\n        print(\"Error: Invalid message type or data value.\")\n        return\n\n    message = b\"AZ\" + sender + receiver + msg_type.to_bytes(2, 'big') + data.to_bytes(1, 'big') + b\"YB\"\n\n    uart.write(message)\n    print(f\"Sent: {message}\")\n\ndef handle_message(message):\n    try:\n        if len(message) &lt; 7:\n            print(\"ESP: Message too short, deleting.\")\n            return\n\n        if len(message) &gt; MAX_MESSAGE_LEN:\n            print(\"ESP: Message too long, deleting.\")\n            return\n\n        prefix = message[:2]\n        sender = message[2:3]\n        receiver = message[3:4]\n        msg_type = int.from_bytes(message[4:6], 'big')\n        data = int.from_bytes(message[6:7], 'big')\n        suffix = message[-2:]\n\n        if prefix != b\"AZ\" or suffix != b\"YB\":\n            print(\"ESP: Invalid message format, deleting.\")\n            return\n\n        if sender in team:\n            print(f\"ESP: Valid sender: {sender.decode()}\")\n        else:\n            print(f\"ESP: Invalid sender {sender}, deleting.\")\n            return\n\n        if receiver in team or receiver == broadcast:\n            print(f\"ESP: Valid receiver: {receiver.decode()}\")\n        else:\n            print(f\"ESP: Invalid receiver {receiver}, deleting.\")\n            return\n\n        if msg_type not in VALID_MESSAGE_TYPES:\n            print(f\"ESP: Invalid message type {msg_type}, deleting.\")\n            return\n\n        if data not in VALID_MESSAGE_TYPES[msg_type]:\n            print(f\"ESP: Invalid data value {data} for message type {msg_type}, deleting.\")\n            return\n\n        # Self-message check AFTER validation\n        if sender == id:\n            print(\"ESP: Deleted own message.\")\n            return\n\n        # If message is valid and meant for this device\n        if receiver == id or receiver == broadcast:\n            print(f\"ESP: Received message from {sender.decode()}! Type {msg_type}, Data {data}\")\n            led.value(led.value() ^ 1)  # Toggle LED\n\n        # Forward message if not intended for this device\n        if receiver != id and receiver != broadcast:\n            print(f\"ESP: Forwarding message to {receiver.decode()}\")\n            uart.write(message)\n\n    except Exception as e:\n        print(f\"ESP: Error processing message: {e}\")\n\nasync def process_rx():\n    stream = b''  # Buffer to collect incoming message\n    receiving_message = False\n\n    while True:\n        c = uart.read(1)  # Read one byte\n\n        if c:\n            stream += c  # Append byte to stream\n\n            if stream[-2:] == b'AZ':  # Message start detected\n                receiving_message = True\n                stream = b'AZ'  # Reset stream, keeping 'AZ'\n\n            if receiving_message and stream[-2:] == b'YB':  # Message end detected\n                receiving_message = False\n                handle_message(stream)  # Process the full message\n                stream = b''  # Reset buffer for next message\n\n            if len(stream) &gt; MAX_MESSAGE_LEN:  # Prevent oversized messages\n                print(\"ESP: Message too long, deleting.\")\n                stream = b''  # Clear buffer\n                receiving_message = False\n\n        await asyncio.sleep_ms(10)  # Small delay for async handling   \n\nasync def heartbeat():\n    while True:\n        print('ESP: Sending Test Code')\n        send_message(id, b'A', 0x02, 0x01)\n        #uart.write(b'AZHX\\x00\\x03\\x03YB')\n        await asyncio.sleep(10)\n\nasync def main():\n    while True:\n        await asyncio.sleep(1)\n\nasyncio.create_task(process_rx())\nasyncio.create_task(heartbeat())\n\ntry:\n    asyncio.run(main())\nfinally:\n    asyncio.new_event_loop()\n</code></pre>"},{"location":"Bill%20of%20Materials/","title":"Bill of Materials","text":""},{"location":"Bill%20of%20Materials/#link-for-higher-visibility","title":"Link for Higher Visibility","text":"<ul> <li>Complete BOM (.xlsx)</li> </ul>"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#_1","title":"Block Diagram","text":""},{"location":"Component%20Selection/","title":"Component Selection","text":""},{"location":"Component%20Selection/#my-role-in-the-project","title":"My Role in the Project","text":"<p>My role in this project is to provide exhibit-goers with a Human Machine Interface (HMI) that allows them to take control of the display's actuator. Please refer to my team's webpage for a more detailed descripton of the product. My goal is to allow the user to navigate through the interface with three seperate buttons for movement and selection. Inputs should be reflected on the interface, which is done through a small OLED LCD display. In regards to my communication responsibilities, I am responsible for sending UART commands to my team members in charge of actuators and internet as the stepper motor should move on user command and display information on a mobile device respectively.</p>"},{"location":"Component%20Selection/#table-1-selecting-a-pushbutton","title":"Table 1: Selecting a Pushbutton","text":"Potential Solutions Pros Cons  Option #1: PTS636SM43SMTR LFS Surface Mount Push Button ($0.23) link to product - Good PCB Contact  - Tactile  - Inexpensive - Long Shipping Time  - Small for User Interactivity  Option #2: Gikfun Tactile Surface Mount Push Button ($8.68)  link to product - Fun and Colorful for Exhibit  - Tactile  - Fast Shipping - Expensive  - Comes in Bulk  - Must Reorientate Pins for PCB  Option #3: K8WH41G LFS Tactile Surface Mount Push Button w/ LED ($6.45)  link to product - LED for Exhibit Experience  - Tactile - Long Shipping Time  - Extra Pins for LED Control  - Must Buy Other Buttons for Different LED Color <p>Choice: Option #2: Gikfun Tactile Surface Mount Push Button Rationale: This option was selected due to the extreme amount of customizability available. Considering the team's STEM exhibit works closely with color recognition, it was important to select something that works well within the theme. Also, these buttons funtion to provide excellent tactile feedback while offering a level of interactivity other options cannot. While it's true that this option was the most expensive, it remains in the range of budget.</p>"},{"location":"Component%20Selection/#table-2-selecting-an-oled-screen","title":"Table 2: Selecting an OLED Screen","text":"Potential Solutions Pros Cons  Option #1: Songhe 0.96inch OLED LCD Display Board (~$2.00 per board) link to product - I2C Serial Communication  - 5 Pack  - Provided from ASU - No Price Listed  - Small Resolution  - Might be Difficult for Users to See  Option #2: Winstar Graphic LCD Display Module ($7.02)  link to product - I2C Serial Communication  - Easy Communication w/ ESP32  - Small Resolution  - Not Provided from ASU  - Might be Difficult for Users to See  Option #3: HiLetgo 0.91inch I2C Serial OLED LCD Display ($6.49)  link to product - I2C Serial Communication  - Rectangular Display  - Fast Shipping - Small Resolution  - Not Provided from ASU <p>Choice: Option #1: Songhe 0.96inch OLED LCD Display Board Rationale: Overall, all solutions in this table were very similar and varied only by price and display size. The reason option #1 was selected was due to the fact that ASU provides the screen, which saves money and shipping time. Familiarity with this device will be gained through in-class labs as well.</p>"},{"location":"Component%20Selection/#table-3-selecting-a-voltage-regulator","title":"Table 3: Selecting a Voltage Regulator","text":"Potential Solutions Pros Cons  Option #1: AP2114H-3.3TRG1 Linear Voltage Regulator ($0.61)  link to product - Meets Requirements  - Inexpensive  - Compact Design - Requires External Components  - 6V Input  - Linear, not Adjustable  Option #2: L6981C33DR - Buck Switching Regulator ($2.80)  link to product - High Efficiency  - Adjustable and Fixed Capabilities  - Compact Design - Requires External Components  - Expensive for Regulator   Option #3: SC189ZSKTRT - 3.3V Buck Switching Regulator ($1.89)  link to product - High Efficiency  - Inexpensive  - Compact Design - Requires External Components  - Soldering Might be Difficult  <p>Choice: Option #2: L6981C33DR - 3.3V Buck Switching Regulator Rationale: This solution was selected as it meets all project requirements with high efficiency as well. While it does require extra components, the datasheet helps identify a proper setup for good results. Even though this option is expensive for a regulator, this is a necessary tradeoff to take as it implements functionality better than other options. </p>"},{"location":"Component%20Selection/#table-4-selecting-a-power-supply","title":"Table 4: Selecting a Power Supply","text":"Potential Solutions Pros Cons  Option #1: WR9HD1333CCP-F(R6B) - 9V 12 W AC/DC External Wall Mount ($3.94)  link to product - Barrel Jack Output  - Inexpensive  - 1.33A (Sufficient for ESP32, Might Need More Room for Other Peripherals)  - Long Shipping Time  Option #2: WSU090-2000-13 - 9V 18 W AC/DC External Wall Mount ($12.15)   link to product - Barrel Jack Output  - 2A Supply  - Expensive  - Long Shipping Time  - Bulky Design  Option #3: BestCH 9V 3.0A AC Power Supply Adapter ($4.52)  link to product - Barrel Jack Output  - 3A Supply  - Provided by ASU  - Bulky Design  - Datasheet not Provided <p>Choice: Option #3: BestCH 9V 3.0A AC Power Supply Adapter Rationale: The rationale behind this selection is the fact that is can provide up to 3.0A of current for the subsystem. This is more than enough to allow for complete functionality. Furthermore, this component is provided by ASU and allows finances to be focused into other areas. Although this design is bulky, it does the best at meeting project requirements. </p>"},{"location":"Component%20Selection/#microcontroller-used-esp32-s3-wroom-1-n4","title":"Microcontroller Used: ESP32-S3-WROOM-1-N4","text":"ESP Info Answer Model S3-WROOM-1-N4 Product Page URL link ESP32-S3-WROOM-1-N4 Datasheet URL link ESP32 S3 Datasheet URL link ESP32 S3 Technical Reference Manual URL link Vendor link link Code Examples Arduino Example w/ LCD StackExchange Forum External Resources URL(s) Expressif Tutorial YouTube Tutorial (Good w/ BLE) Unit cost $2.95 Absolute Maximum Current for entire IC 1500mA Supply Voltage Range 3.0V - 3.6V (3.3V is Typical) Absolute Maximum current  (for VDD3P3) 500mA Maximum GPIO current  (per pin) 40mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL Schematic Checklist PCB Layout Design Hardware Development"},{"location":"Component%20Selection/#pin-layout","title":"Pin Layout","text":""},{"location":"Component%20Selection/#pin-allocation","title":"Pin Allocation","text":"Peripheral Pin Assignment (Name, Number) Power 3V3, 2 Ground GND, 1  GND, 40  GND, 41 USB IO19, 13 (D-)  IO20, 14 (D+) UART IO17, 10 (Tx)  TX18, 11 (Rx) I2C IO21, 23 (SCL)  IO47, 24 (SDA) GPIO IO4, 4  IO5, 5  IO6, 6"},{"location":"Component%20Selection/#summary-table-all-components-selected","title":"Summary Table (All Components Selected)","text":"Component Selected Image ESP32-S3-WROOM-1-N4 Microcontroller ($2.95) BestCH 9V 3.0A AC Power Supply Adapter ($4.52) L6981C33DR - Buck Switching Regulator ($2.80) Songhe 0.96inch OLED LCD Display Board (~$2.00 per board)"},{"location":"Component%20Selection/#power-budget","title":"Power Budget","text":"<p>The power budget is extremely useful in providing viable component options that  safely operate the entire board. This process acts as confirmation and reassurance, while eliminating overall risks of damaging devices. </p>"},{"location":"Resources/","title":"Resources","text":"<p>Full Code Used</p> <p>3D Model for Display Stand</p>"},{"location":"Schematic%20%26%20PCB%20Design/","title":"Schematic & PCB Design","text":"<p>This page is dedicated to discuss my schematic and printed circuit board (PCB) designed specifically for the Human Machine Interface.</p> <p>Included in the schematic are seven different sections, each with their own responsibility to allow the HMI board to function. The PCB is a physical representation of the schematic and includes all hardware providing the necessary functionality. The functionality of these designs satisfies user needs and product requirements by including a working layout of powering a programmable LED display screen. This screen provides 'exhibit-goers' with the option to interactively select the direction the marbles should take through the inclusion of pushbuttons. The designs also allow for UART implementation, which is how the subsystem communicates to other subsystems within the team. </p>"},{"location":"Schematic%20%26%20PCB%20Design/#schematic-design","title":"Schematic Design","text":""},{"location":"Schematic%20%26%20PCB%20Design/#_1","title":"Schematic & PCB Design","text":""},{"location":"Schematic%20%26%20PCB%20Design/#printed-circuit-board-pcb-design","title":"Printed Circuit Board (PCB) Design","text":"<p>Front View Back View </p>"},{"location":"Schematic%20%26%20PCB%20Design/#links-for-high-resolution-visibility","title":"Links for High Resolution Visibility","text":"<ul> <li>PDF (Schematic)</li> <li>PDF (PCB)</li> <li>ZIP Folder (Schematic)</li> <li>ZIP Folder (PCB)</li> </ul>"},{"location":"Schematic%20%26%20PCB%20Design/#team-pcb-design-front-back-views","title":"Team PCB Design (Front &amp; Back Views)","text":""},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}